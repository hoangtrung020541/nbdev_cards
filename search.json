[
  {
    "objectID": "desk.html",
    "href": "desk.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including jokers\nWhen we initially create deck, all of the cards will be present:\n\ndeck = Deck()\ndeck\n\nA♣️; 2♣️; 3♣️; 4♣️; 5♣️; 6♣️; 7♣️; 8♣️; 9♣️; 10♣️; J♣️; Q♣️; K♣️; A♦️; 2♦️; 3♦️; 4♦️; 5♦️; 6♦️; 7♦️; 8♦️; 9♦️; 10♦️; J♦️; Q♦️; K♦️; A♥️; 2♥️; 3♥️; 4♥️; 5♥️; 6♥️; 7♥️; 8♥️; 9♥️; 10♥️; J♥️; Q♥️; K♥️; A♠️; 2♠️; 3♠️; 4♠️; 5♠️; 6♠️; 7♠️; 8♠️; 9♠️; 10♠️; J♠️; Q♠️; K♠️\n\n\nThe should be 52 cards.\n\ntest_eq(len(deck), 52)\n\nAs a reminder, thes are the suits we defined for a Card:\n\nsuits\n\n['♣️', '♦️', '♥️', '♠️']\n\n\nWe can check if, say, the Ace of Clubs is the deck\n\nCard(1,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13))\n\nThere are 51 cards left in the deck now.\n\ntest_eq(len(deck), 51)\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nRemove card from the deck or raises exeption if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\ncard23 = Card(2,3)\ndeck.remove(card23)\nassert card23 not in deck\n\n\nsource\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nShuffles the cards in this deck\n\nsource\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=<function true>)\n\nDraw n cards, with replacement if replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of the cards to draw\n\n\nreplace\nbool\ntrue\nwhether or not draw with replacement\n\n\n\n\ndraw_n(13, replace=False)\n\n[6♥️, 8♥️, J♦️, 7♣️, 4♦️, 2♠️, 6♠️, J♠️, 7♥️, 3♠️, Q♠️, 7♦️, Q♥️]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "A deck of cards demo of nbdev"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards",
    "section": "Install",
    "text": "Install\nInstall using:\npip install nbdev_cards\nor:\nconda install -c fastai nbdev_cards"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nThis card provides a Card class you can use to create, display, and compare playing cards:\n\nCard(1,3)\n\n3 ♦️\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♣️', '♦️', '♥️', '♠️']"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card–A basic playing card",
    "section": "",
    "text": "We will be using numbers to represent playing card Clubs and ranks. These are the ranks:\nFor instance the suit at index 0\nThese are the ranks\nFor instance the rank at index 1 (ote that there isn’t a playing card at position 0 , Since we want the ranks fo match the indicies where possible):\nsource"
  },
  {
    "objectID": "card.html#comparision-operators",
    "href": "card.html#comparision-operators",
    "title": "card–A basic playing card",
    "section": "Comparision Operators",
    "text": "Comparision Operators\nEquaity, less than, and greater than work on the rank and suit indices:\nFor instance, here’s a test of equaliy…\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\n\n… and a test of < …\n\nassert Card(suit=1, rank=3) < Card(suit=2, rank=3)\n\n… and a finally of > …\n\nassert Card(suit=3, rank=3) > Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3) > Card(suit=2, rank=3)"
  }
]